/*
 * The MIT License
 *
 * Copyright 2017 Devesh.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gameoflife;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JPanel;

/**
 *
 * @author Devesh
 */
public class GridSurface extends JPanel implements MouseListener {

    
    private ConwaysGameOfLife conwaysBoard;
    public static final int CELL_SIZE = 20;
    // 
    // each cell is 5x5
    /**
     * Creates new form GridSurface
     */
    public GridSurface() {
        initComponents();
        // extra padding  2px since line is taking up space
         setSize(new Dimension(ConwaysGameOfLife.WIDTH*(GridSurface.CELL_SIZE + 2), ConwaysGameOfLife.HEIGHT*GridSurface.CELL_SIZE));
         setBackground(Color.GRAY);
         
         addMouseListener(this);
         
         conwaysBoard = new ConwaysGameOfLife();
    }

    // converts the coordinates to respective cell location
    private int coordToCellX(int x)
    {
        return x/CELL_SIZE;
    }
    private int coordToCellY(int y)
    {
        return y/CELL_SIZE;
    }
    
    // mouse click on area
    public void mouseClicked(MouseEvent e)
    {
        int cellX = coordToCellX(e.getX());
        int cellY = coordToCellY(e.getY());
        
        if(cellX >= 0 && cellX < ConwaysGameOfLife.WIDTH && cellY >= 0 && cellY < ConwaysGameOfLife.HEIGHT)
        {
            conwaysBoard.invertStateOfCell(cellX,cellY);
        }
         assert conwaysBoard.getStateOfCell(cellX, cellY);
  
        repaint();
    }
    
    
    // paint Grid cells
    // call this everytime mouse click detected
    private void paintGrid(Graphics g)
    {
        Graphics2D g2d = (Graphics2D)g;
        g2d.setColor(Color.WHITE);
        // if alive, paint it
        for(int x=0 ; x< ConwaysGameOfLife.WIDTH; ++x)
            for( int y=0; y< ConwaysGameOfLife.HEIGHT; ++y)
               if(conwaysBoard.getStateOfCell(x, y))
                    g2d.fillRect(x*CELL_SIZE, y*CELL_SIZE, CELL_SIZE, CELL_SIZE);
    }
    
    private void doDrawing(Graphics g)
    {
         Graphics2D g2d = (Graphics2D)g;
         g2d.setPaint(Color.BLUE);
         
         for (int i = 1; i<ConwaysGameOfLife.WIDTH; ++i)
         {
             g2d.drawLine(i*CELL_SIZE,0,i*CELL_SIZE ,ConwaysGameOfLife.HEIGHT*CELL_SIZE);
    
         }
         for (int i = 1; i<=ConwaysGameOfLife.HEIGHT; ++i)
         {
             g2d.drawLine(0, i*CELL_SIZE, ConwaysGameOfLife.WIDTH*CELL_SIZE , i*CELL_SIZE);
    
         }
         
       
         
      }
    
    @Override
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        paintGrid(g);
        doDrawing(g);
       }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mousePressed(MouseEvent e) {
        }

    @Override
    public void mouseReleased(MouseEvent e) {
        }

    @Override
    public void mouseEntered(MouseEvent e) {
        }

    @Override
    public void mouseExited(MouseEvent e) {
        }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
